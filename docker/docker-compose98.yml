# 创建一个名为 "aioveu-boot" 的桥接网络，在同一个网络中的容器可以通过容器名互相访问
networks:
  aioveu-boot:
    driver: bridge

services:
  mysql:
    image: mysql:8.0.29
    container_name: aioveu-boot-mysql
    restart: unless-stopped # 重启策略：除非手动停止容器，否则自动重启
    environment:
      - TZ=Asia/Shanghai
      - LANG= en_US.UTF-8
      - MYSQL_ROOT_PASSWORD=775825 #设置 root 用户的密码   默认密码123456存储在mysql-data里，重建容器要把data清空
    volumes:
       # 远程服务器上的绝对路径
#      - /opt/aioveu-boot/docker/mysql/conf/my.cnf:/etc/my.cnf # 挂载 my.cnf 文件到容器的指定路径
      - /opt/aioveu-boot/docker/mysql/data:/var/lib/mysql # 持久化 MySQL 数据
      - /opt/aioveu-boot/sql/mysql:/docker-entrypoint-initdb.d # 初始化 SQL 脚本目录
    ports:
      - 3309:3306
    networks:
      - aioveu-boot # 加入 "aioveu-boot" 网络

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  redis:
    image: redis:7.2.3
    container_name: aioveu-boot-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf  # 启动 Redis 服务并添加密码为：123456，默认不开启 Redis AOF 方式持久化配置
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /opt/aioveu-boot/docker/redis/data:/data
      - /opt/aioveu-boot/docker/redis/config/redis.conf:/etc/redis/redis.conf
    ports:
      - 6381:6379
    networks:
      - aioveu-boot

  minio:
#    image: minio/minio:latest
    image: minio/minio:RELEASE.2024-07-16T23-46-41Z   #选择可编辑桶的minio镜像版本
    container_name: aioveu-boot-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000  # API端口直接对外暴露
      - 9001:9001  # 控制台端口直接对外暴露
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
#      - MINIO_ROOT_USER=minioadmin
#      - MINIO_ROOT_PASSWORD=minioadmin
      #解决 MinIO 默认凭证安全警告
      #这个警告表明您的 MinIO 实例正在使用默认管理员凭证（minioadmin:minioadmin），这会造成严重的安全风险。
      #MINIO_DOMAIN 环境变量是解决路径问题的核心配置
      #正确配置MinIO域别名 (Domain Alias)
      #这是MinIO特有的配置需求，需要明确告知MinIO "当通过反向代理访问时，请使用什么域名作为对象的基础URL
      # --- 域名代理关键配置 ---
      - MINIO_DOMAIN= minio.aioveu.com   #在启动MinIO容器时，添加环境变量  指定域名 或者，如果你使用的是MinIO的配置文件，可以在config.env中设置
      - MINIO_SERVER_URL= https://minio.aioveu.com       # 对象的外部访问URL
      - MINIO_ROOT_USER=minioaioveu
      - MINIO_ROOT_PASSWORD=minioaioveu
      - MINIO_BROWSER_REDIRECT_URL=https://love.aioveu.com  # 重要！
      - MINIO_BROWSER_WS_PATH=/ws/objectManager
    volumes:
       # 不再挂载配置文件
#      - type: bind
#        source: ./minio/config/config.json
#        target: /root/.minio/config.json
      - /opt/aioveu-boot/docker/minio/data:/data
    networks:
      - aioveu-boot



    # --- 配置环境变量文件 (.env) ---
    # 创建.env文件（与docker-compose.yml同级）
    # MINIO_ROOT_USER=admin
    # MINIO_ROOT_PASSWORD=strongpassword123!
    # 注意：文件不要提交到版本控制！

#  xxl-job-admin:
#    image: xuxueli/xxl-job-admin:2.4.0
#    container_name: aioveu-boot-xxl-job-admin
#    restart: unless-stopped
#    environment:
#      PARAMS: '--spring.datasource.url=jdbc:mysql://mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=775825 --spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver'
#    volumes:
#      - ./xxljob/logs:/data/applogs
#    ports:
#      - 8080:8080
#    networks:
#      - aioveu-boot

  aioveu-boot:
    image: aioveu-boot:v1.2.1
    pull_policy: never  # 关键设置，即使本地已有镜像，Docker Compose 在启动时仍尝试连接远程仓库  # 仅使用本地镜像
    container_name: aioveu-boot
    #    build:
    #      context: .
    #      dockerfile: Dockerfile
#    environment:  配置文件设置
#      - SPRING_PROFILES_ACTIVE=prod
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dbname?useSSL=false
#      - SPRING_DATASOURCE_USERNAME=user
#      - SPRING_DATASOURCE_PASSWORD=pass

     #方式一：通过环境变量注入配置，Spring Boot 支持直接将 环境变量 映射到配置属性，无需额外代码。只需遵循以下命名规则
#    environment:
#      - SERVER_PORT=8081
#      - DATASOURCE_URL=jdbc:mysql://prod-db:3306/mydb
#      - DATASOURCE_USERNAME=admin
#      - DATASOURCE_PASSWORD=prod123
#    volumes:
#      - /opt/aioveu-boot/config/application.yml:/app/resources/application.yml  # 挂载本地配置目录
#      - /opt/aioveu-boot/config/application-dev.yml:/app/resources/application-dev.yml  # 挂载本地配置目录
#      - /opt/aioveu-boot/config/application-prod.yml:/app/resources/application-prod.yml  # 挂载本地配置目录

    #五、总结
    #•环境变量：适合简单配置（如端口、数据库连接信息），尤其是敏感信息，推荐优先使用。
    #•挂载配置文件：适合复杂配置（如 YAML 结构、多环境配置），需注意文件路径和权限。
    #•最佳实践：敏感信息（密码、密钥）必须通过环境变量传递，避免写入镜像或配置文件；非敏感配置可根据复杂度选择环境变量或挂载文件。
    #通过以上方式，可实现镜像与配置解耦，灵活适配不同环境（开发、测试、生产）。


#    deploy:   #添加内存限制
#      resources:
#        limits:
#          cpus: '1.0'   # 限制 CPU 使用为 1 核心
#          memory: 512M   # 限制最大内存为 512MB    # 根据实际需求调整
#        reservations: # 额外添加资源预留
#          memory: 256M   # 预留 256M 保证应用启动
##          memory_swap: 512M  # 相当于禁用交换空间
#    mem_swappiness: 0  # 完全禁止容器使用 swap

#当您的应用程序在运行过程中突然被终止并显示 "Killed" 消息时，这通常是由于内存不足导致的。
    ports:
      - 8989:8989
    networks:
      - aioveu-boot
    depends_on:
      mysql:
        condition: service_healthy  # 确保 MySQL 健康后才启动

#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8989/actuator/health" ]使用实际端口
#      #Actuator 是 Spring Boot 框架自带的生产级功能模块，它提供了一系列用于监控和管理应用程序的端点（Endpoints）。
#
#      interval: 30s
#      timeout: 5s
#      retries: 3
#      start_period: 40s   # 如果应用在启动后才监听端口，给应用更多启动时间




#  aioveu-nginx:
#    image: nginx    #使用的镜像名称
#    container_name: aioveu-nginx #给容器指定一个名称，方便以后引用。
#    restart: unless-stopped
#    #    build:
#    #      context: .
#    #      dockerfile: Dockerfile
#    volumes:
##      - /mnt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf   #挂载主配置文件
##      - /mnt/nginx/html:/usr/share/nginx/html         #挂载网站文件
##      - /mnt/nginx/logs:/var/log/nginx/               #持久化存储日志
##      - /mnt/nginx/ssl:/etc/nginx/ssl                 #挂载SSL证书
#
##      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf   #挂载主配置文件
#       #关键修复：明确指定文件挂载
##      - type: bind
##        source: ./nginx/conf/nginx.conf
##        target: /etc/nginx/nginx.conf
##        read_only: true
#
##       #配置文件目录挂载
##      - type: bind
##        source: ./nginx/conf.d
##        target: /etc/nginx/conf.d
##        read_only: true
#
##       #SSL证书目录
##      - type: bind
##        source: ./nginx/ssl
##        target: /etc/nginx/ssl
###        read_only: true
#
#      - /opt/aioveu-boot/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf        #挂载网站文件
#      - /opt/aioveu-boot/docker/nginx/html:/usr/share/nginx/html         #挂载网站文件
#      - /opt/aioveu-boot/docker/nginx/logs:/var/log/nginx               #持久化存储日志
#      - /opt/aioveu-boot/docker/nginx/ssl:/etc/nginx/ssl                 #挂载SSL证书
#
#      #/usr/share/nginx/html nginx配置文件的html路径要与映射路径一致
#
#    ports:
#      - 9999:80     # 主机端口:容器端口    #表示将nginx容器的80端口映射到宿主机的80端口。格式为宿主机端口:容器端口
#      - 4434:443
#    networks:
#      - aioveu-boot
#    depends_on:
#      - mysql
#        #新加载Nginx配置
#        #sudo nginx -s reload


#  aioveu-nginx-h5:
#    image: nginx    #使用的镜像名称
#    container_name: aioveu-nginx-h5 #给容器指定一个名称，方便以后引用。
#    #    restart: unless-stopped
#    volumes:
#      #      - /mnt/nginx/conf/nginx.conf:/etc/nginx/nginx.conf   #挂载主配置文件
#      #      - /mnt/nginx/html:/usr/share/nginx/html         #挂载网站文件
#      #      - /mnt/nginx/logs:/var/log/nginx/               #持久化存储日志
#      #      - /mnt/nginx/ssl:/etc/nginx/ssl                 #挂载SSL证书
#
#      #      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf   #挂载主配置文件
#      #       #关键修复：明确指定文件挂载
#      #      - type: bind
#      #        source: ./nginx/conf/nginx.conf
#      #        target: /etc/nginx/nginx.conf
#      #        read_only: true
#      #
#      #       #配置文件目录挂载
#      #      - type: bind
#      #        source: ./nginx/conf.d
#      #        target: /etc/nginx/conf.d
#      #        read_only: true
#      #
#      #       #SSL证书目录
#      #      - type: bind
#      #        source: ./nginx/ssl
#      #        target: /etc/nginx/ssl
#      ##        read_only: true
#
#      - ./nginx-h5/conf/nginx.conf:/etc/nginx/nginx.conf        #挂载网站文件
#      - ./nginx-h5/html:/usr/share/nginx/html         #挂载网站文件
#      - ./nginx-h5/logs:/var/log/nginx               #持久化存储日志
#      - ./nginx-h5/ssl:/etc/nginx/ssl                 #挂载SSL证书
#
#      #/usr/share/nginx/html nginx配置文件的html路径要与映射路径一致
#
#    ports:
#      - 9999:80    #表示将nginx容器的80端口映射到宿主机的80端口。格式为宿主机端口:容器端口
#    networks:
#      - aioveu-boot
#    depends_on:
#      - mysql
#      #新加载Nginx配置
#      # sudo nginx -s reload